/* eslint-disable */
import * as types from "./graphql"
import { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core"

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
  "query Format {\n  format {\n    data {\n      attributes {\n        openspace\n        lawOfTwoFeet\n        butterfly\n        bumblebee\n        schedule\n      }\n    }\n  }\n}": typeof types.FormatDocument
  'query Story {\n  history {\n    data {\n      attributes {\n        founders\n        keyMoments\n        intro\n        items(pagination: {limit: 10000}) {\n          id\n          date\n          dateFormat\n          additionalText\n          title\n          description\n          image {\n            data {\n              id\n              attributes {\n                name\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  players(sort: "name:asc", filters: {position: {eq: "Founder"}}) {\n    data {\n      id\n      attributes {\n        ...PlayerItem\n      }\n    }\n  }\n}': typeof types.StoryDocument
  "query Article($slug: String!) {\n  articles(filters: {slug: {eq: $slug}}) {\n    data {\n      attributes {\n        ...ArticleDetails\n      }\n    }\n  }\n}\n\nfragment ArticleDetails on Article {\n  slug\n  title\n  category\n  summary\n  publishedAt\n  updatedAt\n  cannonical\n  tags(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        value\n      }\n    }\n  }\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  images(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  author {\n    data {\n      id\n      attributes {\n        name\n        slug\n        position\n        tagline\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n  content\n}": typeof types.ArticleDocument
  'query Articles($page: Int!, $pageSize: Int!, $category: String, $tag: String) {\n  articles(\n    sort: "publishedAt:desc"\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {category: {eqi: $category}, tags: {value: {eqi: $tag}}}\n  ) {\n    data {\n      id\n      attributes {\n        ...ArticleItem\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n        total\n        pageCount\n      }\n    }\n  }\n}\n\nfragment ArticleItem on Article {\n  slug\n  title\n  summary\n  category\n  publishedAt\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  author {\n    data {\n      id\n      attributes {\n        slug\n        name\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}': typeof types.ArticlesDocument
  'query ArticleNav {\n  articles(sort: "publishedAt:desc", pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n        title\n        category\n        tags {\n          data {\n            attributes {\n              value\n            }\n          }\n        }\n        publishedAt\n        defaultImage {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}': typeof types.ArticleNavDocument
  'query ArticleSidebar {\n  latest: articles(sort: "publishedAt:desc", pagination: {limit: 3}) {\n    data {\n      id\n      attributes {\n        slug\n        title\n        publishedAt\n        defaultImage {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n  categories: articles {\n    data {\n      attributes {\n        category\n      }\n    }\n  }\n  tags: articles {\n    data {\n      attributes {\n        tags {\n          data {\n            id\n            attributes {\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n}': typeof types.ArticleSidebarDocument
  "query ArticleSlugs {\n  articles(pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}": typeof types.ArticleSlugsDocument
  'query EventCalendar {\n  events(sort: "start:desc", pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n        name\n        start\n        end\n        status\n        venue {\n          data {\n            attributes {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}': typeof types.EventCalendarDocument
  'query Event($slug: String!) {\n  events(filters: {slug: {eq: $slug}}) {\n    data {\n      attributes {\n        ...EventDetails\n      }\n    }\n  }\n}\n\nfragment EventDetails on Event {\n  slug\n  name\n  start\n  end\n  timezone\n  status\n  description\n  contactEmail\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  images(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  location {\n    data {\n      attributes {\n        name\n        country\n        location\n      }\n    }\n  }\n  venue {\n    data {\n      attributes {\n        name\n        website\n        location\n        addressDetails\n      }\n    }\n  }\n  timetable {\n    id\n    day\n    description\n    timeslots(pagination: {limit: 10000}) {\n      id\n      time\n      description\n    }\n  }\n  registration {\n    link\n    widgetCode\n  }\n  sponsorships(pagination: {limit: 10000}) {\n    id\n    category\n    sponsors {\n      data {\n        id\n        attributes {\n          name\n          url\n          logo {\n            data {\n              id\n              attributes {\n                name\n                url\n                blurhash\n                width\n                height\n              }\n            }\n          }\n          socialNetworks {\n            id\n            type\n            url\n          }\n        }\n      }\n    }\n  }\n  hosts(sort: "name", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...PlayerItem\n      }\n    }\n  }\n  mentors(sort: "name", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...PlayerItem\n      }\n    }\n  }\n  players(sort: "name", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...PlayerItem\n      }\n    }\n  }\n  media {\n    id\n    url\n    type\n  }\n}': typeof types.EventDocument
  'query Events($page: Int!, $pageSize: Int!, $status: String, $location: String, $country: String) {\n  events(\n    sort: "start:desc"\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {status: {eqi: $status}, location: {slug: {eqi: $location}, country: {eqi: $country}}}\n  ) {\n    data {\n      id\n      attributes {\n        ...EventItem\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n        total\n        pageCount\n      }\n    }\n  }\n}\n\nquery UpcomingEvents($today: DateTime!) {\n  events(sort: "start:asc", filters: {end: {gte: $today}}) {\n    data {\n      id\n      attributes {\n        ...EventItem\n      }\n    }\n  }\n}\n\nfragment EventItem on Event {\n  slug\n  name\n  start\n  end\n  timezone\n  status\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  location {\n    data {\n      attributes {\n        name\n        country\n      }\n    }\n  }\n}': typeof types.EventsDocument
  "query Hosting {\n  hosting {\n    data {\n      attributes {\n        content\n      }\n    }\n  }\n}": typeof types.HostingDocument
  'query Markers {\n  events(\n    sort: "start:asc"\n    pagination: {limit: 10000}\n    filters: {status: {ne: "Cancelled"}, venue: {location: {ne: {}}}}\n  ) {\n    data {\n      id\n      attributes {\n        slug\n        name\n        start\n        end\n        timezone\n        status\n        registration {\n          link\n        }\n        venue {\n          data {\n            id\n            attributes {\n              name\n              website\n              location\n            }\n          }\n        }\n      }\n    }\n  }\n}': typeof types.MarkersDocument
  'query EventNav {\n  events(sort: "start:desc", pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n        name\n        start\n        status\n        location {\n          data {\n            attributes {\n              slug\n              name\n              country\n            }\n          }\n        }\n        defaultImage {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}': typeof types.EventNavDocument
  "query EventSlugs($today: DateTime!) {\n  events(pagination: {limit: 10000}, filters: {end: {lt: $today}}) {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}": typeof types.EventSlugsDocument
  "query Testimonials {\n  testimonials(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        content\n        url\n        audio {\n          data {\n            attributes {\n              name\n              url\n            }\n          }\n        }\n        author {\n          data {\n            attributes {\n              name\n              slug\n              tagline\n              avatar {\n                data {\n                  id\n                  attributes {\n                    name\n                    url\n                    blurhash\n                    width\n                    height\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}": typeof types.TestimonialsDocument
  "query Game($slug: String!) {\n  games(filters: {slug: {eq: $slug}}) {\n    data {\n      attributes {\n        ...GameDetails\n      }\n    }\n  }\n}\n\nfragment GameDetails on Game {\n  slug\n  name\n  category\n  scale\n  timebox\n  summary\n  credits\n  description\n  publishedAt\n  tags(pagination: {limit: 10000}) {\n    id\n    value\n  }\n  materials(pagination: {limit: 10000}) {\n    id\n    value\n  }\n  preparationSteps(pagination: {limit: 10000}) {\n    id\n    value\n  }\n  safety(pagination: {limit: 10000}) {\n    id\n    key\n    value\n  }\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  images(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  resources(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        name\n        url\n      }\n    }\n  }\n  firstPlayedAt {\n    data {\n      attributes {\n        name\n        slug\n      }\n    }\n  }\n  documentedBy {\n    data {\n      id\n      attributes {\n        name\n        slug\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n  proposedBy {\n    data {\n      id\n      attributes {\n        name\n        slug\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n  ratings {\n    energy\n    connection\n    silliness\n  }\n}": typeof types.GameDocument
  'query Games($page: Int!, $pageSize: Int!, $category: String, $tag: String) {\n  games(\n    sort: "name:asc"\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {category: {eqi: $category}, tags: {value: {eqi: $tag}}}\n  ) {\n    data {\n      id\n      attributes {\n        ...GameItem\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n        total\n        pageCount\n      }\n    }\n  }\n}\n\nfragment GameItem on Game {\n  slug\n  name\n  summary\n  timebox\n  scale\n  category\n  proposedBy {\n    data {\n      id\n      attributes {\n        name\n        slug\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n}': typeof types.GamesDocument
  'query GameNav {\n  games(sort: "name:asc", pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n        name\n        category\n        tags {\n          value\n        }\n        publishedAt\n        defaultImage {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}': typeof types.GameNavDocument
  "query GameSlugs {\n  games(pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}": typeof types.GameSlugsDocument
  "query Expectations($type: String!) {\n  expectations(filters: {type: {eq: $type}}) {\n    data {\n      id\n      attributes {\n        title\n        type\n        icon\n        content\n      }\n    }\n  }\n}": typeof types.ExpectationsDocument
  "query Home {\n  home {\n    data {\n      attributes {\n        images(pagination: {limit: 10000}) {\n          data {\n            attributes {\n              name\n              url\n              width\n              height\n              hash\n              mime\n              provider\n              size\n            }\n          }\n        }\n      }\n    }\n  }\n}": typeof types.HomeDocument
  'query Player($slug: String!) {\n  players(filters: {slug: {eq: $slug}}) {\n    data {\n      attributes {\n        ...PlayerDetails\n      }\n    }\n  }\n}\n\nfragment PlayerDetails on Player {\n  slug\n  name\n  position\n  company\n  tagline\n  bio\n  website\n  location\n  avatar {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  socialNetworks {\n    id\n    url\n    type\n  }\n  attended(sort: "start:desc", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...EventItem\n      }\n    }\n  }\n  hosted(sort: "start:desc", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...EventItem\n      }\n    }\n  }\n  mentored(sort: "start:desc", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...EventItem\n      }\n    }\n  }\n}': typeof types.PlayerDocument
  'query Players($page: Int!, $pageSize: Int!, $position: String) {\n  players(\n    sort: "name:asc"\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {position: {eqi: $position}}\n  ) {\n    data {\n      id\n      attributes {\n        ...PlayerItem\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n        total\n        pageCount\n      }\n    }\n  }\n}\n\nfragment PlayerItem on Player {\n  slug\n  name\n  position\n  avatar {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  socialNetworks {\n    id\n    url\n    type\n  }\n}': typeof types.PlayersDocument
  'query PlayerNav {\n  players(sort: "name:asc", pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n        name\n        position\n        updatedAt\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}': typeof types.PlayerNavDocument
  "query PlayerSlugs {\n  players(pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}": typeof types.PlayerSlugsDocument
  "query Search($input: String!) {\n  search(query: $input) {\n    events(filters: {publishedAt: {notNull: true}}) {\n      data {\n        id\n        attributes {\n          ...EventItem\n        }\n      }\n    }\n    players {\n      data {\n        id\n        attributes {\n          ...PlayerItem\n        }\n      }\n    }\n    games(filters: {publishedAt: {notNull: true}}) {\n      data {\n        attributes {\n          ...GameItem\n        }\n      }\n    }\n    articles(filters: {publishedAt: {notNull: true}}) {\n      data {\n        attributes {\n          ...ArticleItem\n        }\n      }\n    }\n  }\n}": typeof types.SearchDocument
}
const documents: Documents = {
  "query Format {\n  format {\n    data {\n      attributes {\n        openspace\n        lawOfTwoFeet\n        butterfly\n        bumblebee\n        schedule\n      }\n    }\n  }\n}":
    types.FormatDocument,
  'query Story {\n  history {\n    data {\n      attributes {\n        founders\n        keyMoments\n        intro\n        items(pagination: {limit: 10000}) {\n          id\n          date\n          dateFormat\n          additionalText\n          title\n          description\n          image {\n            data {\n              id\n              attributes {\n                name\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  players(sort: "name:asc", filters: {position: {eq: "Founder"}}) {\n    data {\n      id\n      attributes {\n        ...PlayerItem\n      }\n    }\n  }\n}':
    types.StoryDocument,
  "query Article($slug: String!) {\n  articles(filters: {slug: {eq: $slug}}) {\n    data {\n      attributes {\n        ...ArticleDetails\n      }\n    }\n  }\n}\n\nfragment ArticleDetails on Article {\n  slug\n  title\n  category\n  summary\n  publishedAt\n  updatedAt\n  cannonical\n  tags(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        value\n      }\n    }\n  }\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  images(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  author {\n    data {\n      id\n      attributes {\n        name\n        slug\n        position\n        tagline\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n  content\n}":
    types.ArticleDocument,
  'query Articles($page: Int!, $pageSize: Int!, $category: String, $tag: String) {\n  articles(\n    sort: "publishedAt:desc"\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {category: {eqi: $category}, tags: {value: {eqi: $tag}}}\n  ) {\n    data {\n      id\n      attributes {\n        ...ArticleItem\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n        total\n        pageCount\n      }\n    }\n  }\n}\n\nfragment ArticleItem on Article {\n  slug\n  title\n  summary\n  category\n  publishedAt\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  author {\n    data {\n      id\n      attributes {\n        slug\n        name\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}':
    types.ArticlesDocument,
  'query ArticleNav {\n  articles(sort: "publishedAt:desc", pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n        title\n        category\n        tags {\n          data {\n            attributes {\n              value\n            }\n          }\n        }\n        publishedAt\n        defaultImage {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}':
    types.ArticleNavDocument,
  'query ArticleSidebar {\n  latest: articles(sort: "publishedAt:desc", pagination: {limit: 3}) {\n    data {\n      id\n      attributes {\n        slug\n        title\n        publishedAt\n        defaultImage {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n  categories: articles {\n    data {\n      attributes {\n        category\n      }\n    }\n  }\n  tags: articles {\n    data {\n      attributes {\n        tags {\n          data {\n            id\n            attributes {\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n}':
    types.ArticleSidebarDocument,
  "query ArticleSlugs {\n  articles(pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}":
    types.ArticleSlugsDocument,
  'query EventCalendar {\n  events(sort: "start:desc", pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n        name\n        start\n        end\n        status\n        venue {\n          data {\n            attributes {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}':
    types.EventCalendarDocument,
  'query Event($slug: String!) {\n  events(filters: {slug: {eq: $slug}}) {\n    data {\n      attributes {\n        ...EventDetails\n      }\n    }\n  }\n}\n\nfragment EventDetails on Event {\n  slug\n  name\n  start\n  end\n  timezone\n  status\n  description\n  contactEmail\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  images(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  location {\n    data {\n      attributes {\n        name\n        country\n        location\n      }\n    }\n  }\n  venue {\n    data {\n      attributes {\n        name\n        website\n        location\n        addressDetails\n      }\n    }\n  }\n  timetable {\n    id\n    day\n    description\n    timeslots(pagination: {limit: 10000}) {\n      id\n      time\n      description\n    }\n  }\n  registration {\n    link\n    widgetCode\n  }\n  sponsorships(pagination: {limit: 10000}) {\n    id\n    category\n    sponsors {\n      data {\n        id\n        attributes {\n          name\n          url\n          logo {\n            data {\n              id\n              attributes {\n                name\n                url\n                blurhash\n                width\n                height\n              }\n            }\n          }\n          socialNetworks {\n            id\n            type\n            url\n          }\n        }\n      }\n    }\n  }\n  hosts(sort: "name", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...PlayerItem\n      }\n    }\n  }\n  mentors(sort: "name", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...PlayerItem\n      }\n    }\n  }\n  players(sort: "name", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...PlayerItem\n      }\n    }\n  }\n  media {\n    id\n    url\n    type\n  }\n}':
    types.EventDocument,
  'query Events($page: Int!, $pageSize: Int!, $status: String, $location: String, $country: String) {\n  events(\n    sort: "start:desc"\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {status: {eqi: $status}, location: {slug: {eqi: $location}, country: {eqi: $country}}}\n  ) {\n    data {\n      id\n      attributes {\n        ...EventItem\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n        total\n        pageCount\n      }\n    }\n  }\n}\n\nquery UpcomingEvents($today: DateTime!) {\n  events(sort: "start:asc", filters: {end: {gte: $today}}) {\n    data {\n      id\n      attributes {\n        ...EventItem\n      }\n    }\n  }\n}\n\nfragment EventItem on Event {\n  slug\n  name\n  start\n  end\n  timezone\n  status\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  location {\n    data {\n      attributes {\n        name\n        country\n      }\n    }\n  }\n}':
    types.EventsDocument,
  "query Hosting {\n  hosting {\n    data {\n      attributes {\n        content\n      }\n    }\n  }\n}":
    types.HostingDocument,
  'query Markers {\n  events(\n    sort: "start:asc"\n    pagination: {limit: 10000}\n    filters: {status: {ne: "Cancelled"}, venue: {location: {ne: {}}}}\n  ) {\n    data {\n      id\n      attributes {\n        slug\n        name\n        start\n        end\n        timezone\n        status\n        registration {\n          link\n        }\n        venue {\n          data {\n            id\n            attributes {\n              name\n              website\n              location\n            }\n          }\n        }\n      }\n    }\n  }\n}':
    types.MarkersDocument,
  'query EventNav {\n  events(sort: "start:desc", pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n        name\n        start\n        status\n        location {\n          data {\n            attributes {\n              slug\n              name\n              country\n            }\n          }\n        }\n        defaultImage {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}':
    types.EventNavDocument,
  "query EventSlugs($today: DateTime!) {\n  events(pagination: {limit: 10000}, filters: {end: {lt: $today}}) {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}":
    types.EventSlugsDocument,
  "query Testimonials {\n  testimonials(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        content\n        url\n        audio {\n          data {\n            attributes {\n              name\n              url\n            }\n          }\n        }\n        author {\n          data {\n            attributes {\n              name\n              slug\n              tagline\n              avatar {\n                data {\n                  id\n                  attributes {\n                    name\n                    url\n                    blurhash\n                    width\n                    height\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}":
    types.TestimonialsDocument,
  "query Game($slug: String!) {\n  games(filters: {slug: {eq: $slug}}) {\n    data {\n      attributes {\n        ...GameDetails\n      }\n    }\n  }\n}\n\nfragment GameDetails on Game {\n  slug\n  name\n  category\n  scale\n  timebox\n  summary\n  credits\n  description\n  publishedAt\n  tags(pagination: {limit: 10000}) {\n    id\n    value\n  }\n  materials(pagination: {limit: 10000}) {\n    id\n    value\n  }\n  preparationSteps(pagination: {limit: 10000}) {\n    id\n    value\n  }\n  safety(pagination: {limit: 10000}) {\n    id\n    key\n    value\n  }\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  images(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  resources(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        name\n        url\n      }\n    }\n  }\n  firstPlayedAt {\n    data {\n      attributes {\n        name\n        slug\n      }\n    }\n  }\n  documentedBy {\n    data {\n      id\n      attributes {\n        name\n        slug\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n  proposedBy {\n    data {\n      id\n      attributes {\n        name\n        slug\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n  ratings {\n    energy\n    connection\n    silliness\n  }\n}":
    types.GameDocument,
  'query Games($page: Int!, $pageSize: Int!, $category: String, $tag: String) {\n  games(\n    sort: "name:asc"\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {category: {eqi: $category}, tags: {value: {eqi: $tag}}}\n  ) {\n    data {\n      id\n      attributes {\n        ...GameItem\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n        total\n        pageCount\n      }\n    }\n  }\n}\n\nfragment GameItem on Game {\n  slug\n  name\n  summary\n  timebox\n  scale\n  category\n  proposedBy {\n    data {\n      id\n      attributes {\n        name\n        slug\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n}':
    types.GamesDocument,
  'query GameNav {\n  games(sort: "name:asc", pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n        name\n        category\n        tags {\n          value\n        }\n        publishedAt\n        defaultImage {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}':
    types.GameNavDocument,
  "query GameSlugs {\n  games(pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}":
    types.GameSlugsDocument,
  "query Expectations($type: String!) {\n  expectations(filters: {type: {eq: $type}}) {\n    data {\n      id\n      attributes {\n        title\n        type\n        icon\n        content\n      }\n    }\n  }\n}":
    types.ExpectationsDocument,
  "query Home {\n  home {\n    data {\n      attributes {\n        images(pagination: {limit: 10000}) {\n          data {\n            attributes {\n              name\n              url\n              width\n              height\n              hash\n              mime\n              provider\n              size\n            }\n          }\n        }\n      }\n    }\n  }\n}":
    types.HomeDocument,
  'query Player($slug: String!) {\n  players(filters: {slug: {eq: $slug}}) {\n    data {\n      attributes {\n        ...PlayerDetails\n      }\n    }\n  }\n}\n\nfragment PlayerDetails on Player {\n  slug\n  name\n  position\n  company\n  tagline\n  bio\n  website\n  location\n  avatar {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  socialNetworks {\n    id\n    url\n    type\n  }\n  attended(sort: "start:desc", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...EventItem\n      }\n    }\n  }\n  hosted(sort: "start:desc", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...EventItem\n      }\n    }\n  }\n  mentored(sort: "start:desc", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...EventItem\n      }\n    }\n  }\n}':
    types.PlayerDocument,
  'query Players($page: Int!, $pageSize: Int!, $position: String) {\n  players(\n    sort: "name:asc"\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {position: {eqi: $position}}\n  ) {\n    data {\n      id\n      attributes {\n        ...PlayerItem\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n        total\n        pageCount\n      }\n    }\n  }\n}\n\nfragment PlayerItem on Player {\n  slug\n  name\n  position\n  avatar {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  socialNetworks {\n    id\n    url\n    type\n  }\n}':
    types.PlayersDocument,
  'query PlayerNav {\n  players(sort: "name:asc", pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n        name\n        position\n        updatedAt\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}':
    types.PlayerNavDocument,
  "query PlayerSlugs {\n  players(pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}":
    types.PlayerSlugsDocument,
  "query Search($input: String!) {\n  search(query: $input) {\n    events(filters: {publishedAt: {notNull: true}}) {\n      data {\n        id\n        attributes {\n          ...EventItem\n        }\n      }\n    }\n    players {\n      data {\n        id\n        attributes {\n          ...PlayerItem\n        }\n      }\n    }\n    games(filters: {publishedAt: {notNull: true}}) {\n      data {\n        attributes {\n          ...GameItem\n        }\n      }\n    }\n    articles(filters: {publishedAt: {notNull: true}}) {\n      data {\n        attributes {\n          ...ArticleItem\n        }\n      }\n    }\n  }\n}":
    types.SearchDocument,
}

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query Format {\n  format {\n    data {\n      attributes {\n        openspace\n        lawOfTwoFeet\n        butterfly\n        bumblebee\n        schedule\n      }\n    }\n  }\n}",
): (typeof documents)["query Format {\n  format {\n    data {\n      attributes {\n        openspace\n        lawOfTwoFeet\n        butterfly\n        bumblebee\n        schedule\n      }\n    }\n  }\n}"]
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query Story {\n  history {\n    data {\n      attributes {\n        founders\n        keyMoments\n        intro\n        items(pagination: {limit: 10000}) {\n          id\n          date\n          dateFormat\n          additionalText\n          title\n          description\n          image {\n            data {\n              id\n              attributes {\n                name\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  players(sort: "name:asc", filters: {position: {eq: "Founder"}}) {\n    data {\n      id\n      attributes {\n        ...PlayerItem\n      }\n    }\n  }\n}',
): (typeof documents)['query Story {\n  history {\n    data {\n      attributes {\n        founders\n        keyMoments\n        intro\n        items(pagination: {limit: 10000}) {\n          id\n          date\n          dateFormat\n          additionalText\n          title\n          description\n          image {\n            data {\n              id\n              attributes {\n                name\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  players(sort: "name:asc", filters: {position: {eq: "Founder"}}) {\n    data {\n      id\n      attributes {\n        ...PlayerItem\n      }\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query Article($slug: String!) {\n  articles(filters: {slug: {eq: $slug}}) {\n    data {\n      attributes {\n        ...ArticleDetails\n      }\n    }\n  }\n}\n\nfragment ArticleDetails on Article {\n  slug\n  title\n  category\n  summary\n  publishedAt\n  updatedAt\n  cannonical\n  tags(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        value\n      }\n    }\n  }\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  images(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  author {\n    data {\n      id\n      attributes {\n        name\n        slug\n        position\n        tagline\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n  content\n}",
): (typeof documents)["query Article($slug: String!) {\n  articles(filters: {slug: {eq: $slug}}) {\n    data {\n      attributes {\n        ...ArticleDetails\n      }\n    }\n  }\n}\n\nfragment ArticleDetails on Article {\n  slug\n  title\n  category\n  summary\n  publishedAt\n  updatedAt\n  cannonical\n  tags(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        value\n      }\n    }\n  }\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  images(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  author {\n    data {\n      id\n      attributes {\n        name\n        slug\n        position\n        tagline\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n  content\n}"]
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query Articles($page: Int!, $pageSize: Int!, $category: String, $tag: String) {\n  articles(\n    sort: "publishedAt:desc"\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {category: {eqi: $category}, tags: {value: {eqi: $tag}}}\n  ) {\n    data {\n      id\n      attributes {\n        ...ArticleItem\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n        total\n        pageCount\n      }\n    }\n  }\n}\n\nfragment ArticleItem on Article {\n  slug\n  title\n  summary\n  category\n  publishedAt\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  author {\n    data {\n      id\n      attributes {\n        slug\n        name\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}',
): (typeof documents)['query Articles($page: Int!, $pageSize: Int!, $category: String, $tag: String) {\n  articles(\n    sort: "publishedAt:desc"\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {category: {eqi: $category}, tags: {value: {eqi: $tag}}}\n  ) {\n    data {\n      id\n      attributes {\n        ...ArticleItem\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n        total\n        pageCount\n      }\n    }\n  }\n}\n\nfragment ArticleItem on Article {\n  slug\n  title\n  summary\n  category\n  publishedAt\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  author {\n    data {\n      id\n      attributes {\n        slug\n        name\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query ArticleNav {\n  articles(sort: "publishedAt:desc", pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n        title\n        category\n        tags {\n          data {\n            attributes {\n              value\n            }\n          }\n        }\n        publishedAt\n        defaultImage {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}',
): (typeof documents)['query ArticleNav {\n  articles(sort: "publishedAt:desc", pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n        title\n        category\n        tags {\n          data {\n            attributes {\n              value\n            }\n          }\n        }\n        publishedAt\n        defaultImage {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query ArticleSidebar {\n  latest: articles(sort: "publishedAt:desc", pagination: {limit: 3}) {\n    data {\n      id\n      attributes {\n        slug\n        title\n        publishedAt\n        defaultImage {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n  categories: articles {\n    data {\n      attributes {\n        category\n      }\n    }\n  }\n  tags: articles {\n    data {\n      attributes {\n        tags {\n          data {\n            id\n            attributes {\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n}',
): (typeof documents)['query ArticleSidebar {\n  latest: articles(sort: "publishedAt:desc", pagination: {limit: 3}) {\n    data {\n      id\n      attributes {\n        slug\n        title\n        publishedAt\n        defaultImage {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n  categories: articles {\n    data {\n      attributes {\n        category\n      }\n    }\n  }\n  tags: articles {\n    data {\n      attributes {\n        tags {\n          data {\n            id\n            attributes {\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query ArticleSlugs {\n  articles(pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}",
): (typeof documents)["query ArticleSlugs {\n  articles(pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}"]
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query EventCalendar {\n  events(sort: "start:desc", pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n        name\n        start\n        end\n        status\n        venue {\n          data {\n            attributes {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}',
): (typeof documents)['query EventCalendar {\n  events(sort: "start:desc", pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n        name\n        start\n        end\n        status\n        venue {\n          data {\n            attributes {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query Event($slug: String!) {\n  events(filters: {slug: {eq: $slug}}) {\n    data {\n      attributes {\n        ...EventDetails\n      }\n    }\n  }\n}\n\nfragment EventDetails on Event {\n  slug\n  name\n  start\n  end\n  timezone\n  status\n  description\n  contactEmail\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  images(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  location {\n    data {\n      attributes {\n        name\n        country\n        location\n      }\n    }\n  }\n  venue {\n    data {\n      attributes {\n        name\n        website\n        location\n        addressDetails\n      }\n    }\n  }\n  timetable {\n    id\n    day\n    description\n    timeslots(pagination: {limit: 10000}) {\n      id\n      time\n      description\n    }\n  }\n  registration {\n    link\n    widgetCode\n  }\n  sponsorships(pagination: {limit: 10000}) {\n    id\n    category\n    sponsors {\n      data {\n        id\n        attributes {\n          name\n          url\n          logo {\n            data {\n              id\n              attributes {\n                name\n                url\n                blurhash\n                width\n                height\n              }\n            }\n          }\n          socialNetworks {\n            id\n            type\n            url\n          }\n        }\n      }\n    }\n  }\n  hosts(sort: "name", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...PlayerItem\n      }\n    }\n  }\n  mentors(sort: "name", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...PlayerItem\n      }\n    }\n  }\n  players(sort: "name", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...PlayerItem\n      }\n    }\n  }\n  media {\n    id\n    url\n    type\n  }\n}',
): (typeof documents)['query Event($slug: String!) {\n  events(filters: {slug: {eq: $slug}}) {\n    data {\n      attributes {\n        ...EventDetails\n      }\n    }\n  }\n}\n\nfragment EventDetails on Event {\n  slug\n  name\n  start\n  end\n  timezone\n  status\n  description\n  contactEmail\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  images(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  location {\n    data {\n      attributes {\n        name\n        country\n        location\n      }\n    }\n  }\n  venue {\n    data {\n      attributes {\n        name\n        website\n        location\n        addressDetails\n      }\n    }\n  }\n  timetable {\n    id\n    day\n    description\n    timeslots(pagination: {limit: 10000}) {\n      id\n      time\n      description\n    }\n  }\n  registration {\n    link\n    widgetCode\n  }\n  sponsorships(pagination: {limit: 10000}) {\n    id\n    category\n    sponsors {\n      data {\n        id\n        attributes {\n          name\n          url\n          logo {\n            data {\n              id\n              attributes {\n                name\n                url\n                blurhash\n                width\n                height\n              }\n            }\n          }\n          socialNetworks {\n            id\n            type\n            url\n          }\n        }\n      }\n    }\n  }\n  hosts(sort: "name", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...PlayerItem\n      }\n    }\n  }\n  mentors(sort: "name", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...PlayerItem\n      }\n    }\n  }\n  players(sort: "name", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...PlayerItem\n      }\n    }\n  }\n  media {\n    id\n    url\n    type\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query Events($page: Int!, $pageSize: Int!, $status: String, $location: String, $country: String) {\n  events(\n    sort: "start:desc"\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {status: {eqi: $status}, location: {slug: {eqi: $location}, country: {eqi: $country}}}\n  ) {\n    data {\n      id\n      attributes {\n        ...EventItem\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n        total\n        pageCount\n      }\n    }\n  }\n}\n\nquery UpcomingEvents($today: DateTime!) {\n  events(sort: "start:asc", filters: {end: {gte: $today}}) {\n    data {\n      id\n      attributes {\n        ...EventItem\n      }\n    }\n  }\n}\n\nfragment EventItem on Event {\n  slug\n  name\n  start\n  end\n  timezone\n  status\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  location {\n    data {\n      attributes {\n        name\n        country\n      }\n    }\n  }\n}',
): (typeof documents)['query Events($page: Int!, $pageSize: Int!, $status: String, $location: String, $country: String) {\n  events(\n    sort: "start:desc"\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {status: {eqi: $status}, location: {slug: {eqi: $location}, country: {eqi: $country}}}\n  ) {\n    data {\n      id\n      attributes {\n        ...EventItem\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n        total\n        pageCount\n      }\n    }\n  }\n}\n\nquery UpcomingEvents($today: DateTime!) {\n  events(sort: "start:asc", filters: {end: {gte: $today}}) {\n    data {\n      id\n      attributes {\n        ...EventItem\n      }\n    }\n  }\n}\n\nfragment EventItem on Event {\n  slug\n  name\n  start\n  end\n  timezone\n  status\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  location {\n    data {\n      attributes {\n        name\n        country\n      }\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query Hosting {\n  hosting {\n    data {\n      attributes {\n        content\n      }\n    }\n  }\n}",
): (typeof documents)["query Hosting {\n  hosting {\n    data {\n      attributes {\n        content\n      }\n    }\n  }\n}"]
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query Markers {\n  events(\n    sort: "start:asc"\n    pagination: {limit: 10000}\n    filters: {status: {ne: "Cancelled"}, venue: {location: {ne: {}}}}\n  ) {\n    data {\n      id\n      attributes {\n        slug\n        name\n        start\n        end\n        timezone\n        status\n        registration {\n          link\n        }\n        venue {\n          data {\n            id\n            attributes {\n              name\n              website\n              location\n            }\n          }\n        }\n      }\n    }\n  }\n}',
): (typeof documents)['query Markers {\n  events(\n    sort: "start:asc"\n    pagination: {limit: 10000}\n    filters: {status: {ne: "Cancelled"}, venue: {location: {ne: {}}}}\n  ) {\n    data {\n      id\n      attributes {\n        slug\n        name\n        start\n        end\n        timezone\n        status\n        registration {\n          link\n        }\n        venue {\n          data {\n            id\n            attributes {\n              name\n              website\n              location\n            }\n          }\n        }\n      }\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query EventNav {\n  events(sort: "start:desc", pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n        name\n        start\n        status\n        location {\n          data {\n            attributes {\n              slug\n              name\n              country\n            }\n          }\n        }\n        defaultImage {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}',
): (typeof documents)['query EventNav {\n  events(sort: "start:desc", pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n        name\n        start\n        status\n        location {\n          data {\n            attributes {\n              slug\n              name\n              country\n            }\n          }\n        }\n        defaultImage {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query EventSlugs($today: DateTime!) {\n  events(pagination: {limit: 10000}, filters: {end: {lt: $today}}) {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}",
): (typeof documents)["query EventSlugs($today: DateTime!) {\n  events(pagination: {limit: 10000}, filters: {end: {lt: $today}}) {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}"]
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query Testimonials {\n  testimonials(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        content\n        url\n        audio {\n          data {\n            attributes {\n              name\n              url\n            }\n          }\n        }\n        author {\n          data {\n            attributes {\n              name\n              slug\n              tagline\n              avatar {\n                data {\n                  id\n                  attributes {\n                    name\n                    url\n                    blurhash\n                    width\n                    height\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
): (typeof documents)["query Testimonials {\n  testimonials(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        content\n        url\n        audio {\n          data {\n            attributes {\n              name\n              url\n            }\n          }\n        }\n        author {\n          data {\n            attributes {\n              name\n              slug\n              tagline\n              avatar {\n                data {\n                  id\n                  attributes {\n                    name\n                    url\n                    blurhash\n                    width\n                    height\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"]
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query Game($slug: String!) {\n  games(filters: {slug: {eq: $slug}}) {\n    data {\n      attributes {\n        ...GameDetails\n      }\n    }\n  }\n}\n\nfragment GameDetails on Game {\n  slug\n  name\n  category\n  scale\n  timebox\n  summary\n  credits\n  description\n  publishedAt\n  tags(pagination: {limit: 10000}) {\n    id\n    value\n  }\n  materials(pagination: {limit: 10000}) {\n    id\n    value\n  }\n  preparationSteps(pagination: {limit: 10000}) {\n    id\n    value\n  }\n  safety(pagination: {limit: 10000}) {\n    id\n    key\n    value\n  }\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  images(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  resources(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        name\n        url\n      }\n    }\n  }\n  firstPlayedAt {\n    data {\n      attributes {\n        name\n        slug\n      }\n    }\n  }\n  documentedBy {\n    data {\n      id\n      attributes {\n        name\n        slug\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n  proposedBy {\n    data {\n      id\n      attributes {\n        name\n        slug\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n  ratings {\n    energy\n    connection\n    silliness\n  }\n}",
): (typeof documents)["query Game($slug: String!) {\n  games(filters: {slug: {eq: $slug}}) {\n    data {\n      attributes {\n        ...GameDetails\n      }\n    }\n  }\n}\n\nfragment GameDetails on Game {\n  slug\n  name\n  category\n  scale\n  timebox\n  summary\n  credits\n  description\n  publishedAt\n  tags(pagination: {limit: 10000}) {\n    id\n    value\n  }\n  materials(pagination: {limit: 10000}) {\n    id\n    value\n  }\n  preparationSteps(pagination: {limit: 10000}) {\n    id\n    value\n  }\n  safety(pagination: {limit: 10000}) {\n    id\n    key\n    value\n  }\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  images(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  resources(pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        name\n        url\n      }\n    }\n  }\n  firstPlayedAt {\n    data {\n      attributes {\n        name\n        slug\n      }\n    }\n  }\n  documentedBy {\n    data {\n      id\n      attributes {\n        name\n        slug\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n  proposedBy {\n    data {\n      id\n      attributes {\n        name\n        slug\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n  ratings {\n    energy\n    connection\n    silliness\n  }\n}"]
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query Games($page: Int!, $pageSize: Int!, $category: String, $tag: String) {\n  games(\n    sort: "name:asc"\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {category: {eqi: $category}, tags: {value: {eqi: $tag}}}\n  ) {\n    data {\n      id\n      attributes {\n        ...GameItem\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n        total\n        pageCount\n      }\n    }\n  }\n}\n\nfragment GameItem on Game {\n  slug\n  name\n  summary\n  timebox\n  scale\n  category\n  proposedBy {\n    data {\n      id\n      attributes {\n        name\n        slug\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n}',
): (typeof documents)['query Games($page: Int!, $pageSize: Int!, $category: String, $tag: String) {\n  games(\n    sort: "name:asc"\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {category: {eqi: $category}, tags: {value: {eqi: $tag}}}\n  ) {\n    data {\n      id\n      attributes {\n        ...GameItem\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n        total\n        pageCount\n      }\n    }\n  }\n}\n\nfragment GameItem on Game {\n  slug\n  name\n  summary\n  timebox\n  scale\n  category\n  proposedBy {\n    data {\n      id\n      attributes {\n        name\n        slug\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n  defaultImage {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query GameNav {\n  games(sort: "name:asc", pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n        name\n        category\n        tags {\n          value\n        }\n        publishedAt\n        defaultImage {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}',
): (typeof documents)['query GameNav {\n  games(sort: "name:asc", pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n        name\n        category\n        tags {\n          value\n        }\n        publishedAt\n        defaultImage {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query GameSlugs {\n  games(pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}",
): (typeof documents)["query GameSlugs {\n  games(pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}"]
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query Expectations($type: String!) {\n  expectations(filters: {type: {eq: $type}}) {\n    data {\n      id\n      attributes {\n        title\n        type\n        icon\n        content\n      }\n    }\n  }\n}",
): (typeof documents)["query Expectations($type: String!) {\n  expectations(filters: {type: {eq: $type}}) {\n    data {\n      id\n      attributes {\n        title\n        type\n        icon\n        content\n      }\n    }\n  }\n}"]
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query Home {\n  home {\n    data {\n      attributes {\n        images(pagination: {limit: 10000}) {\n          data {\n            attributes {\n              name\n              url\n              width\n              height\n              hash\n              mime\n              provider\n              size\n            }\n          }\n        }\n      }\n    }\n  }\n}",
): (typeof documents)["query Home {\n  home {\n    data {\n      attributes {\n        images(pagination: {limit: 10000}) {\n          data {\n            attributes {\n              name\n              url\n              width\n              height\n              hash\n              mime\n              provider\n              size\n            }\n          }\n        }\n      }\n    }\n  }\n}"]
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query Player($slug: String!) {\n  players(filters: {slug: {eq: $slug}}) {\n    data {\n      attributes {\n        ...PlayerDetails\n      }\n    }\n  }\n}\n\nfragment PlayerDetails on Player {\n  slug\n  name\n  position\n  company\n  tagline\n  bio\n  website\n  location\n  avatar {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  socialNetworks {\n    id\n    url\n    type\n  }\n  attended(sort: "start:desc", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...EventItem\n      }\n    }\n  }\n  hosted(sort: "start:desc", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...EventItem\n      }\n    }\n  }\n  mentored(sort: "start:desc", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...EventItem\n      }\n    }\n  }\n}',
): (typeof documents)['query Player($slug: String!) {\n  players(filters: {slug: {eq: $slug}}) {\n    data {\n      attributes {\n        ...PlayerDetails\n      }\n    }\n  }\n}\n\nfragment PlayerDetails on Player {\n  slug\n  name\n  position\n  company\n  tagline\n  bio\n  website\n  location\n  avatar {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  socialNetworks {\n    id\n    url\n    type\n  }\n  attended(sort: "start:desc", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...EventItem\n      }\n    }\n  }\n  hosted(sort: "start:desc", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...EventItem\n      }\n    }\n  }\n  mentored(sort: "start:desc", pagination: {limit: 10000}) {\n    data {\n      id\n      attributes {\n        ...EventItem\n      }\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query Players($page: Int!, $pageSize: Int!, $position: String) {\n  players(\n    sort: "name:asc"\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {position: {eqi: $position}}\n  ) {\n    data {\n      id\n      attributes {\n        ...PlayerItem\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n        total\n        pageCount\n      }\n    }\n  }\n}\n\nfragment PlayerItem on Player {\n  slug\n  name\n  position\n  avatar {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  socialNetworks {\n    id\n    url\n    type\n  }\n}',
): (typeof documents)['query Players($page: Int!, $pageSize: Int!, $position: String) {\n  players(\n    sort: "name:asc"\n    pagination: {page: $page, pageSize: $pageSize}\n    filters: {position: {eqi: $position}}\n  ) {\n    data {\n      id\n      attributes {\n        ...PlayerItem\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n        total\n        pageCount\n      }\n    }\n  }\n}\n\nfragment PlayerItem on Player {\n  slug\n  name\n  position\n  avatar {\n    data {\n      id\n      attributes {\n        name\n        url\n        blurhash\n        width\n        height\n      }\n    }\n  }\n  socialNetworks {\n    id\n    url\n    type\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query PlayerNav {\n  players(sort: "name:asc", pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n        name\n        position\n        updatedAt\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}',
): (typeof documents)['query PlayerNav {\n  players(sort: "name:asc", pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n        name\n        position\n        updatedAt\n        avatar {\n          data {\n            id\n            attributes {\n              name\n              url\n              blurhash\n              width\n              height\n            }\n          }\n        }\n      }\n    }\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query PlayerSlugs {\n  players(pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}",
): (typeof documents)["query PlayerSlugs {\n  players(pagination: {limit: 10000}) {\n    data {\n      attributes {\n        slug\n      }\n    }\n  }\n}"]
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query Search($input: String!) {\n  search(query: $input) {\n    events(filters: {publishedAt: {notNull: true}}) {\n      data {\n        id\n        attributes {\n          ...EventItem\n        }\n      }\n    }\n    players {\n      data {\n        id\n        attributes {\n          ...PlayerItem\n        }\n      }\n    }\n    games(filters: {publishedAt: {notNull: true}}) {\n      data {\n        attributes {\n          ...GameItem\n        }\n      }\n    }\n    articles(filters: {publishedAt: {notNull: true}}) {\n      data {\n        attributes {\n          ...ArticleItem\n        }\n      }\n    }\n  }\n}",
): (typeof documents)["query Search($input: String!) {\n  search(query: $input) {\n    events(filters: {publishedAt: {notNull: true}}) {\n      data {\n        id\n        attributes {\n          ...EventItem\n        }\n      }\n    }\n    players {\n      data {\n        id\n        attributes {\n          ...PlayerItem\n        }\n      }\n    }\n    games(filters: {publishedAt: {notNull: true}}) {\n      data {\n        attributes {\n          ...GameItem\n        }\n      }\n    }\n    articles(filters: {publishedAt: {notNull: true}}) {\n      data {\n        attributes {\n          ...ArticleItem\n        }\n      }\n    }\n  }\n}"]

export function graphql(source: string) {
  return (documents as any)[source] ?? {}
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never
